<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cgen.Audio</name>
    </assembly>
    <members>
        <member name="T:Cgen.Audio.Sound">
            <summary>
            Represent a Sound Object.
            </summary>
        </member>
        <member name="T:Cgen.Audio.SoundBuffer">
            <summary>
            Represent an OpenAL Sound Buffer.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.DEFAULT_BUFFER_COUNT">
            <summary>
            Default the number of queue buffer in a <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="M:Cgen.Audio.SoundBuffer.#ctor(System.String,System.Int32)">
            <summary>
            Construct a new <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
            <param name="filename">Path of the sound file.</param>
            <param name="bufferSize">The sound buffer size.</param>
        </member>
        <member name="M:Cgen.Audio.SoundBuffer.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a new <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
            <param name="buffer">An array of byte that contains sound data.</param>
            <param name="bufferSize">The sound buffer size.</param>
        </member>
        <member name="M:Cgen.Audio.SoundBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a new <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
            <param name="stream">Stream that contains sound buffer data.</param>
            <param name="bufferSize">The sound buffer size.</param>
        </member>
        <member name="M:Cgen.Audio.SoundBuffer.Initialize">
            <summary>
            Initialize the Native Handle, De-queue existing buffer and (re)Queue the buffer of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="M:Cgen.Audio.SoundBuffer.QueueBuffer(Cgen.Audio.ISoundStreamReader,System.Boolean)">
            <summary>
            Queue the Buffer Data.
            </summary>
            <param name="reader">Specify the <see cref="T:Cgen.Audio.ISoundStreamReader"/>, be sure that the stream reader is able to handle the provided buffer.</param>
            <param name="precache">Specify whether the buffer should be pre-cached.</param>
        </member>
        <member name="M:Cgen.Audio.SoundBuffer.QueueBuffer(System.Boolean)">
            <summary>
            Queue the Buffer Data.
            </summary>
            <param name="precache">Specify whether the buffer should be pre-cached.</param>
        </member>
        <member name="M:Cgen.Audio.SoundBuffer.DequeueBuffer">
            <summary>
            De-queue the Buffer Data.
            </summary>
        </member>
        <member name="M:Cgen.Audio.SoundBuffer.Dispose">
            <summary>
            Dispose <see cref="T:Cgen.Audio.SoundBuffer"/> Handle.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.IsDisposed">
            <summary>
            Gets the value indicating whether the buffer is disposed.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.IsValid">
            <summary>
            Gets the value indicating whether the <see cref="T:Cgen.Audio.SoundBuffer"/> is valid or not.
            Note that if <see cref="P:Cgen.Audio.SoundBuffer.Deferred"/> property return true, The Buffer should be played at least once before its indicated as a valid <see cref="T:Cgen.Audio.SoundBuffer"/>,
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Reader">
            <summary>
            Gets the Sound Stream Reader of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Source">
            <summary>
            Gets the Native Sound (Source) handle of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Buffers">
            <summary>
            Gets the Native Buffers handle of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Stream">
            <summary>
            Gets the underlying stream of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Format">
            <summary>
            Gets the provided buffer format.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Deferred">
            <summary>
            Gets or Sets whether the Buffer should be deferred or not.
            When <see cref="P:Cgen.Audio.SoundBuffer.Deferred"/> property return true, the Buffer will only load after sounds is being played.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.LowPassHFGain">
            <summary>
            Gets or Sets floating-point of LowPassGainHF of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            This feature only available if OpenAL Efx extension is supported.
            
            Note that the property may return vary value from each different instance
            but assign this property with certain value may apply to all existing <see cref="T:Cgen.Audio.SoundBuffer"/> in most cases.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Volume">
            <summary>
            Gets or Sets the Volume of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            The value range is between 0 (Mute) and 100 (Full)
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Pitch">
            <summary>
            Gets or Sets the Pitch of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Attenuation">
            <summary>
            Gets or Sets the Attenuation factor of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.IsRelativeToListener">
            <summary>
            Gets or Sets a value whether the <see cref="T:Cgen.Audio.SoundBuffer"/> is relative to the listener.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.MinimumDistance">
            <summary>
            Gets or Sets the Minimum distance, the closest distance that can be heard in maximum volume of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            A value of 0, which mean inside the listener is not allowed. Default value is 1.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Position3D">
            <summary>
            Gets or Sets the 3D Position of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            <value>
            The value is should be an array of float that has length 3, first index is for X Component, 2nd for Y and 3rd for Z.
            (e.g: sound.Position3D = new float[3] { 1, 2, 3 }; // X = 1, Y = 2, Z = 3)
            </value>
            </summary>
            
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Pan">
            <summary>
            Gets or Sets Pan value of <see cref="T:Cgen.Audio.SoundBuffer"/>.
            This property is simplified <see cref="P:Cgen.Audio.SoundBuffer.Position3D"/> property for 2D plane.
            
            Note that when assign this property with a certain value, it will override <see cref="P:Cgen.Audio.SoundBuffer.Position3D"/> value.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.IsLooping">
            <summary>
            Gets or Sets a value indicating whether the sound should loop.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.State">
            <summary>
            Gets the state of the <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Position">
            <summary>
            Gets or Sets the stream position of <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundBuffer.Length">
            <summary>
            Gets the length of <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="T:Cgen.Audio.SoundBuffer.SoundState">
            <summary>
            Enumeration for <see cref="T:Cgen.Audio.SoundBuffer"/> States.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.SoundState.None">
            <summary>
            State that used to indicate an Invalid / Unused <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.SoundState.Initial">
            <summary>
            Default state of <see cref="T:Cgen.Audio.SoundBuffer"/> when its loaded, 
            can be manually set when sound is rewind.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.SoundState.Paused">
            <summary>
            Paused state.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.SoundState.Playing">
            <summary>
            Playing state.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.SoundState.Stopped">
            <summary>
            Stopped state.
            </summary>
        </member>
        <member name="T:Cgen.Audio.SoundBuffer.SoundFormat">
            <summary>
            Enumeration for <see cref="T:Cgen.Audio.SoundBuffer"/> Format.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.SoundFormat.Unknown">
            <summary>
            Unidentified Format.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.SoundFormat.Wav">
            <summary>
            Wave Format.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundBuffer.SoundFormat.Vorbis">
            <summary>
            Vorbis Format.
            </summary>
        </member>
        <member name="M:Cgen.Audio.Sound.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Construct a new <see cref="T:Cgen.Audio.Sound"/>.
            </summary>
            <param name="filename">Path of the sound file.</param>
            <param name="bufferSize">The sound buffer size.</param>
            <param name="deferred">Value indicating whether the <see cref="T:Cgen.Audio.Sound"/> should use deferred buffering.</param>
        </member>
        <member name="M:Cgen.Audio.Sound.#ctor(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Construct a new <see cref="T:Cgen.Audio.Sound"/>.
            </summary>
            <param name="buffer">An array of byte that contains sound data.</param>
            <param name="bufferSize">The sound buffer size.</param>
            <param name="deferred">Value indicating whether the <see cref="T:Cgen.Audio.Sound"/> should use deferred buffering.</param>
        </member>
        <member name="M:Cgen.Audio.Sound.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Construct a new <see cref="T:Cgen.Audio.Sound"/>.
            </summary>
            <param name="stream">Stream that contains sound buffer data.</param>
            <param name="bufferSize">The sound buffer size.</param>
            <param name="deferred">Value indicating whether the <see cref="T:Cgen.Audio.Sound"/> should use deferred buffering.</param>
        </member>
        <member name="M:Cgen.Audio.Sound.Play">
            <summary>
            Play the <see cref="T:Cgen.Audio.Sound"/>.
            When the <see cref="T:Cgen.Audio.Sound"/> is provided with valid buffer data, 
            <see cref="P:Cgen.Audio.SoundBuffer.IsValid"/> property will return true.
            </summary>
        </member>
        <member name="M:Cgen.Audio.Sound.Pause">
            <summary>
            Pause the <see cref="T:Cgen.Audio.Sound"/>.
            </summary>
        </member>
        <member name="M:Cgen.Audio.Sound.Resume">
            <summary>
            Resume the <see cref="T:Cgen.Audio.Sound"/>.
            </summary>
        </member>
        <member name="M:Cgen.Audio.Sound.Stop">
            <summary>
            Stop the <see cref="T:Cgen.Audio.Sound"/>.
            </summary>
        </member>
        <member name="E:Cgen.Audio.Sound.SoundStarted">
            <summary>
            Invoked when the sound is start playing.
            </summary>
        </member>
        <member name="E:Cgen.Audio.Sound.SoundPaused">
            <summary>
            Invoked when the sound is paused.
            </summary>
        </member>
        <member name="E:Cgen.Audio.Sound.SoundResumed">
            <summary>
            Invoked when the sound is resumed.
            </summary>
        </member>
        <member name="E:Cgen.Audio.Sound.SoundStopped">
            <summary>
            Invoked when the sound is stop playing
            </summary>
        </member>
        <member name="T:Cgen.Audio.Sound.SoundEventHandler">
            <summary>
            Represents the method that will handles the <see cref="E:Cgen.Audio.Sound.SoundStarted"/>,
            <see cref="E:Cgen.Audio.Sound.SoundPaused"/>, <see cref="E:Cgen.Audio.Sound.SoundResumed"/>
            and <see cref="E:Cgen.Audio.Sound.SoundStopped"/> events of a <see cref="T:Cgen.Audio.Sound"/>.
            </summary>
        </member>
        <member name="T:Cgen.Audio.SoundSystem">
            <summary>
            Provides common Sound operations.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundSystem.DEFAULT_BUFFER_SIZE">
            <summary>
            Default Buffer Size per <see cref="T:Cgen.Audio.SoundBuffer"/>.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundSystem.DEFAULT_UPDATE_RATE">
            <summary>
            Default Update Rate.
            </summary>
        </member>
        <member name="F:Cgen.Audio.SoundSystem.MAXIMUM_NUMBER_OF_SOURCES">
            <summary>
            Maximum Number of Source per Context.
            </summary>
        </member>
        <member name="M:Cgen.Audio.SoundSystem.#ctor">
            <summary>
            Construct a new <see cref="T:Cgen.Audio.SoundSystem"/>.
            </summary>
        </member>
        <member name="M:Cgen.Audio.SoundSystem.Initialize(System.Int32)">
            <summary>
            Initialize the <see cref="T:Cgen.Audio.SoundSystem"/>.
            </summary>
            <param name="bufferSize"></param>
        </member>
        <member name="M:Cgen.Audio.SoundSystem.Start">
            <summary>
            Start <see cref="T:Cgen.Audio.SoundSystem"/> engine.
            Automatically update the engine under separate <see cref="T:System.Threading.Thread"/>.
            <para>After calling <see cref="M:Cgen.Audio.SoundSystem.Start"/>, you don't have to call <see cref="M:Cgen.Audio.SoundSystem.Update(System.Double)"/> manually.</para>
            </summary>
        </member>
        <member name="M:Cgen.Audio.SoundSystem.Stop">
            <summary>
            Stop <see cref="T:Cgen.Audio.SoundSystem"/> engine.
            Stop automatically update the engine and terminate the automated update <see cref="T:System.Threading.Thread"/>.
            
            <para>If there are the sounds still playing, you need to update the engine manually by calling <see cref="M:Cgen.Audio.SoundSystem.Update(System.Double)"/>.</para>
            </summary>
        </member>
        <member name="M:Cgen.Audio.SoundSystem.Update(System.Double)">
            <summary>
            Update the <see cref="T:Cgen.Audio.SoundSystem"/>.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="P:Cgen.Audio.SoundSystem.XRam">
            <summary>
            Gets the XRAM Extension.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundSystem.Efx">
            <summary>
            Gets the EFX Extension.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundSystem.Instance">
            <summary>
            Gets the Singleton Instance of the <see cref="T:Cgen.Audio.SoundSystem"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.SoundSystem.BufferSize">
            <summary>
            Gets the allowed amount of Buffer Size.
            </summary>
        </member>
        <member name="T:Cgen.Audio.ISoundStreamReader">
            <summary>
            Represent a Stream Reader to decode the Audio.
            </summary>
        </member>
        <member name="M:Cgen.Audio.ISoundStreamReader.BufferData(System.Int32,System.Int32)">
            <summary>
            Upload the buffer data samples.
            </summary>
            <param name="bufferSize">The size of buffer.</param>
            <param name="bufferId">Buffer handle.</param>
            <returns></returns>
        </member>
        <member name="P:Cgen.Audio.ISoundStreamReader.Sound">
            <summary>
            Gets the <see cref="T:Cgen.Audio.SoundBuffer"/> handle of the <see cref="T:Cgen.Audio.ISoundStreamReader"/>.
            </summary>
        </member>
        <member name="P:Cgen.Audio.ISoundStreamReader.DecodeTime">
            <summary>
            Gets or Sets the current position of Decoding, in milisecond.
            </summary>
        </member>
        <member name="P:Cgen.Audio.ISoundStreamReader.LengthTime">
            <summary>
            Gets the length of Reader in millisecond.
            </summary>
        </member>
        <member name="M:NVorbis.VorbisReader.ReadSamples(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads decoded samples from the current logical stream
            </summary>
            <param name="buffer">The buffer to write the samples to</param>
            <param name="offset">The offset into the buffer to write the samples to</param>
            <param name="count">The number of samples to write</param>
            <returns>The number of samples written</returns>
        </member>
        <member name="M:NVorbis.VorbisReader.SwitchStreams(System.Int32)">
            <summary>
            Switches to an alternate logical stream.
            </summary>
            <param name="index">The logical stream index to switch to</param>
            <returns><c>True</c> if the properties of the logical stream differ from those of the one previously being decoded. Otherwise, <c>False</c>.</returns>
        </member>
        <member name="P:NVorbis.VorbisReader.Channels">
            <summary>
            Gets the number of channels in the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.SampleRate">
            <summary>
            Gets the sample rate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.UpperBitrate">
            <summary>
            Gets the encoder's upper bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.NominalBitrate">
            <summary>
            Gets the encoder's nominal bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.LowerBitrate">
            <summary>
            Gets the encoder's lower bitrate of the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.Vendor">
            <summary>
            Gets the encoder's vendor string for the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.Comments">
            <summary>
            Gets the comments in the current selected Vorbis stream
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.ContainerOverheadBits">
            <summary>
            Gets the number of bits read that are related to framing and transport alone
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.ClipSamples">
            <summary>
            Gets or sets whether to automatically apply clipping to samples returned by <see cref="M:NVorbis.VorbisReader.ReadSamples(System.Single[],System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.Stats">
            <summary>
            Gets stats from each decoder stream available
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.StreamIndex">
            <summary>
            Gets the currently-selected stream's index
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.StreamCount">
            <summary>
            Returns the number of logical streams found so far in the physical container
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.DecodedTime">
            <summary>
            Gets or Sets the current timestamp of the decoder.  Is the timestamp before the next sample to be decoded
            </summary>
        </member>
        <member name="P:NVorbis.VorbisReader.TotalTime">
            <summary>
            Gets the total length of the current logical stream
            </summary>
        </member>
        <member name="T:Cgen.IO.BufferStream">
            <summary>
            Represent a Stream that using memory as the backing store.
            </summary>
        </member>
        <member name="M:Cgen.IO.BufferStream.#ctor">
            <summary>
            Construct a new <see cref="T:Cgen.IO.BufferStream"/>.
            </summary>
        </member>
        <member name="M:Cgen.IO.BufferStream.#ctor(System.Byte[])">
            <summary>
            Construct a new <see cref="T:Cgen.IO.BufferStream"/>.
            </summary>
            <param name="data">Initial array of bytes for the stream.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.Peek">
            <summary>
            Returns the next available character and does not advance the byte or character position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetBool">
            <summary>
            Reads a boolean value from the current stream and advances the current position by one byte.
            </summary>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Boolean)">
            <summary>
            Writes a boolean value from the current stream and advances the current position by one byte.
            </summary>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetChar">
            <summary>
            Reads the next character from the current stream
            and advance the current position of the stream in accordance with the Encoding used
            and the specific character being read from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Char)">
            <summary>
            Writes a unicode characters to the current stream
            and advances the current position  of the stream in accordance with the Encoding used
            and the specific character being read from the stream.
            </summary>
            <param name="ch">The non-surrogate, Unicode charater to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetChars(System.Int32)">
            <summary>
            Reads count characters from the current stream,
            return data in character array,
            and advance the current position of the stream in accordance with the Encoding used
            and the specific character being read from the stream.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Char[])">
            <summary>
            Writes a section of a character array to the current stream,
            and advances the current position of the stream in accordance with the Encoding used
            and perhaps the specific characters being written to the stream.
            </summary>
            <param name="chars">A characters array containing the data to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a section of a character array to the current stream,
            and advances the current position of the stream in accordance with the Encoding used
            and perhaps the specific characters being written to the stream.
            </summary>
            <param name="chars">A characters array containing the data to write.</param>
            <param name="index">The starting point in buffer at which to begin writing.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetString">
            <summary>
            Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.String)">
            <summary>
            Writes a length-prefixed to this stream with current encoding of the writer stream,
            and advance the current position of the stream in accordance with the Encoding used
            and the specific character being read from the stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads count characters as a string with specified encoding and advances the current position by count characters.
            </summary>
            <param name="count">The number of characters to read.</param>
            <param name="encoding">The Encoding to decodes the array of bytes into a string, null to use default encoding.</param>
            <returns>Null terminated string.</returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.String,System.Text.Encoding)">
            <summary>
            Writes a string with specified encoding and advances the current position by count characters.
            </summary>
            <param name="value">The string to written.</param>
            <param name="encoding">The Encoding to decodes the array of bytes into a string, null to use default encoding.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetByte">
            <summary>
            Reads the next bytes from the current stream and advances the current position by one byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Byte)">
            <summary>
            Writes an unsigned byte to the current stream and advances the current position by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetSByte">
            <summary>
            Reads the signed bytes from the current stream and advances the current position by one byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.SByte)">
            <summary>
            Writes an signed byte to the current stream and advances the current position by one byte.
            </summary>
            <param name="value">The signed byte to write.</param>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetBytes(System.Int32)">
            <summary>
            Reads count bytes from the current stream into byte array and advances the current position by count bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetRemaining">
            <summary>
            Returns the next available bytes from the current position and does not advances the current position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetShort">
            <summary>
            Reads a 2-bytes signed integer from the current stream and advances the current position by two bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Int16)">
            <summary>
            Writes a 2-bytes signed integer from the current stream and advances the current position by two bytes.
            </summary>
            <param name="value">The 2-bytes signed integer to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetInteger">
            <summary>
            Reads a 4-bytes signed integer from the current stream and advances the current position by four bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Int32)">
            <summary>
            Writes a 4-bytes signed integer from the current stream and advances the current position by four bytes.
            </summary>
            <param name="value">The 4-bytes signed integer to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetLong">
            <summary>
            Reads a 8-bytes signed integer from the current stream and advances the current position by eight bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Int64)">
            <summary>
            Writes a 8-bytes signed integer from the current stream and advances the current position by eight bytes.
            </summary>
            <param name="value">The 8-bytes signed integer to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetInt16">
            <summary>
            Reads a 2-bytes signed integer from the current stream and advances the current position by two bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetInt32">
            <summary>
            Reads a 4-bytes signed integer from the current stream and advances the current position by four bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetInt64">
            <summary>
            Reads a 8-bytes signed integer from the current stream and advances the current position by eight bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetUShort">
            <summary>
            Reads a 2-bytes unsigned integer from the current stream and advances the current position by two bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.UInt16)">
            <summary>
            Writes a 2-bytes unsigned integer from the current stream and advances the current position by four bytes.
            </summary>
            <param name="value">The 2-bytes unsigned integer to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetUInteger">
            <summary>
            Reads a 4-bytes unsigned integer from the current stream and advances the current position by two bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.UInt32)">
            <summary>
            Writes a 4-bytes unsigned integer from the current stream and advances the current position by four bytes.
            </summary>
            <param name="value">The 4-bytes unsigned integer to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetULong">
            <summary>
            Reads a 8-bytes unsigned integer from the current stream and advances the current position by eight bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.UInt64)">
            <summary>
            Writes a 8-bytes unsigned integer from the current stream and advances the current position by eight bytes.
            </summary>
            <param name="value">The 8-bytes unsigned integer to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetUInt16">
            <summary>
            Reads a 2-bytes unsigned integer from the current stream and advances the current position by two bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetUInt32">
            <summary>
            Reads a 4-bytes unsigned integer from the current stream and advances the current position by four bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetUInt64">
            <summary>
            Reads a 8-bytes unsigned integer from the current stream and advances the current position by eight bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetFloat">
            <summary>
            Reads a 4-bytes floating point value from the current stream and advances the current position by four bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Single)">
            <summary>
            Writes a 4-bytes floating point value from the current stream and advances the current position by four bytes.
            </summary>
            <param name="value">The 4-bytes floating point value to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetDouble">
            <summary>
            Reads a 8-bytes floating point value from the current stream and advances the current position by eight bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Double)">
            <summary>
            Writes a 8-bytes floating point value from the current stream and advances the current position by eight bytes.
            </summary>
            <param name="value">The 8-bytes floating point value to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.GetDecimal">
            <summary>
            Reads a decimal from the current stream and advances the current position by sixteen bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Decimal)">
            <summary>
            Writes a decimal from the current stream and advances the current position by sixteen bytes.
            </summary>
            <param name="value">The decimal value to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current stream and writes the data to buffer.
            </summary>
            <param name="buffer">When this method return, contains specified array with the values between offset and (offset + count - 1) replaced by characters read from the current stream.</param>
            <param name="offset">The byte offset in buffer at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The number of bytes successfully read.</returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read from buffer.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer at which to begin writing from.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Cgen.IO.BufferStream.ToArray">
            <summary>
            Writes the stream contents to array of bytes, regardless of the <see cref="P:Cgen.IO.BufferStream.Position"/> property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cgen.IO.BufferStream.Dispose">
            <summary>
            Release all resources used by <see cref="T:Cgen.IO.BufferStream"/>.
            </summary>
        </member>
        <member name="P:Cgen.IO.BufferStream.Position">
            <summary>
            Gets or Sets the current position within the stream.
            </summary>
        </member>
        <member name="P:Cgen.IO.BufferStream.Length">
            <summary>
            Gets the length of the Stream in bytes.
            </summary>
        </member>
        <member name="P:Cgen.IO.BufferStream.HasRemaining">
            <summary>
            Gets a value indicating whether the current position of stream is less than the length of stream.
            </summary>
        </member>
        <member name="T:NVorbis.BufferedReadStream">
            <summary>
            A thread-safe, read-only, buffering stream wrapper.
            </summary>
        </member>
        <member name="M:NVorbis.BufferedReadStream.StreamReadBuffer.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the number of bytes specified into the buffer given, starting with the offset indicated.
            </summary>
            <param name="offset">The offset into the stream to start reading.</param>
            <param name="buffer">The buffer to read to.</param>
            <param name="index">The index into the buffer to start writing to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:NVorbis.BufferedReadStream.StreamReadBuffer.DiscardThrough(System.Int64)">
            <summary>
            Tells the buffer that it no longer needs to maintain any bytes before the indicated offset.
            </summary>
            <param name="offset">The offset to discard through.</param>
        </member>
        <member name="P:NVorbis.BufferedReadStream.StreamReadBuffer.MinimalRead">
            <summary>
            Gets or Sets whether to limit reads to the smallest size possible.
            </summary>
        </member>
        <member name="P:NVorbis.BufferedReadStream.StreamReadBuffer.MaxSize">
            <summary>
            Gets or Sets the maximum size of the buffer.  This is not a hard limit.
            </summary>
        </member>
        <member name="P:NVorbis.BufferedReadStream.StreamReadBuffer.BaseOffset">
            <summary>
            Gets the offset of the start of the buffered data.  Reads to offsets before this are likely to require a seek.
            </summary>
        </member>
        <member name="P:NVorbis.BufferedReadStream.StreamReadBuffer.BytesFilled">
            <summary>
            Gets the number of bytes currently buffered.
            </summary>
        </member>
        <member name="P:NVorbis.BufferedReadStream.StreamReadBuffer.Length">
            <summary>
            Gets the number of bytes the buffer can hold.
            </summary>
        </member>
        <member name="T:NVorbis.DataPacket">
            <summary>
            A single data packet from a logical Vorbis stream.
            </summary>
        </member>
        <member name="M:NVorbis.DataPacket.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified length.
            </summary>
            <param name="length">The length of the packet.</param>
        </member>
        <member name="M:NVorbis.DataPacket.ReadNextByte">
            <summary>
            Reads the next byte of the packet.
            </summary>
            <returns>The next byte if available, otherwise -1.</returns>
        </member>
        <member name="M:NVorbis.DataPacket.Done">
            <summary>
            Indicates that the packet has been read and its data is not longer needed.
            </summary>
        </member>
        <member name="M:NVorbis.DataPacket.TryPeekBits(System.Int32,System.Int32@)">
            <summary>
            Attempts to read the specified number of bits from the packet, but may return fewer.  Does not advance the position counter.
            </summary>
            <param name="count">The number of bits to attempt to read.</param>
            <param name="bitsRead">The number of bits actually read.</param>
            <returns>The value of the bits read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is not between 0 and 64.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.PeekBits(System.Int32)">
            <summary>
            Reads the specified number of bits from the packet.  Does not advance the position counter.
            </summary>
            <param name="count">The number of bits to read.</param>
            <returns>The value of the bits read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is not between 0 and 64.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered before reading all the requested bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.SkipBits(System.Int32)">
            <summary>
            Advances the position counter by the specified number of bits.
            </summary>
            <param name="count">The number of bits to advance.</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered before advancing the requested number of bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ResetBitReader">
            <summary>
            Resets the bit reader.
            </summary>
        </member>
        <member name="M:NVorbis.DataPacket.ReadBits(System.Int32)">
            <summary>
            Reads the specified number of bits from the packet and advances the position counter.
            </summary>
            <param name="count">The number of bits to read.</param>
            <returns>The value of the bits read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of bits specified is not between 0 and 64.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered before reading all the requested bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.PeekByte">
            <summary>
            Reads the next byte from the packet.  Does not advance the position counter.
            </summary>
            <returns>The byte read from the packet.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while reading the byte.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadByte">
            <summary>
            Reads the next byte from the packet and advances the position counter.
            </summary>
            <returns>The byte read from the packet.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while reading the byte.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadBytes(System.Int32)">
            <summary>
            Reads the specified number of bytes from the packet and advances the position counter.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>A byte array holding the data read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered before reading all the requested bytes.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified number of bytes from the packet into the buffer specified and advances the position counter.
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="index">The index into the buffer to start placing the read data.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or <paramref name="index"/> + <paramref name="count"/> is past the end of <paramref name="buffer"/>.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadBit">
            <summary>
            Reads the next bit from the packet and advances the position counter.
            </summary>
            <returns>The value of the bit read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while trying to read the bit.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadInt16">
            <summary>
            Retrieves the next 16 bits from the packet as a <see cref="T:System.Int16"/> and advances the position counter.
            </summary>
            <returns>The value of the next 16 bits.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while reading the bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadInt32">
            <summary>
            Retrieves the next 32 bits from the packet as a <see cref="T:System.Int32"/> and advances the position counter.
            </summary>
            <returns>The value of the next 32 bits.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while reading the bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadInt64">
            <summary>
            Retrieves the next 64 bits from the packet as a <see cref="T:System.Int64"/> and advances the position counter.
            </summary>
            <returns>The value of the next 64 bits.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while reading the bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadUInt16">
            <summary>
            Retrieves the next 16 bits from the packet as a <see cref="T:System.UInt16"/> and advances the position counter.
            </summary>
            <returns>The value of the next 16 bits.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while reading the bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadUInt32">
            <summary>
            Retrieves the next 32 bits from the packet as a <see cref="T:System.UInt32"/> and advances the position counter.
            </summary>
            <returns>The value of the next 32 bits.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while reading the bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.ReadUInt64">
            <summary>
            Retrieves the next 64 bits from the packet as a <see cref="T:System.UInt64"/> and advances the position counter.
            </summary>
            <returns>The value of the next 64 bits.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while reading the bits.</exception>
        </member>
        <member name="M:NVorbis.DataPacket.SkipBytes(System.Int32)">
            <summary>
            Advances the position counter by the specified number of bytes.
            </summary>
            <param name="count">The number of bytes to advance.</param>
            <exception cref="T:System.IO.EndOfStreamException">The end of the packet was encountered while advancing.</exception>
        </member>
        <member name="P:NVorbis.DataPacket.IsResync">
            <summary>
            Gets whether the packet was found after a stream resync.
            </summary>
        </member>
        <member name="P:NVorbis.DataPacket.GranulePosition">
            <summary>
            Gets the position of the last granule in the packet.
            </summary>
        </member>
        <member name="P:NVorbis.DataPacket.PageGranulePosition">
            <summary>
            Gets the position of the last granule in the page the packet is in.
            </summary>
        </member>
        <member name="P:NVorbis.DataPacket.Length">
            <summary>
            Gets the length of the packet.
            </summary>
        </member>
        <member name="P:NVorbis.DataPacket.IsEndOfStream">
            <summary>
            Gets whether the packet is the last one in the logical stream.
            </summary>
        </member>
        <member name="P:NVorbis.DataPacket.BitsRead">
            <summary>
            Gets the number of bits read from the packet.
            </summary>
        </member>
        <member name="P:NVorbis.DataPacket.GranuleCount">
            <summary>
            Gets the number of granules in the packet.  If <c>null</c>, the packet has not been decoded yet.
            </summary>
        </member>
        <member name="T:NVorbis.IContainerReader">
            <summary>
            Provides a interface for a Vorbis logical stream container.
            </summary>
        </member>
        <member name="M:NVorbis.IContainerReader.Init">
            <summary>
            Initializes the container and finds the first stream.
            </summary>
            <returns><c>True</c> if a valid logical stream is found, otherwise <c>False</c>.</returns>
        </member>
        <member name="M:NVorbis.IContainerReader.FindNextStream">
            <summary>
            Finds the next new stream in the container.
            </summary>
            <returns><c>True</c> if a new stream was found, otherwise <c>False</c>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:NVorbis.IContainerReader.CanSeek"/> is <c>False</c>.</exception>
        </member>
        <member name="M:NVorbis.IContainerReader.GetTotalPageCount">
            <summary>
            Retrieves the total number of pages in the container.
            </summary>
            <returns>The total number of pages.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:NVorbis.IContainerReader.CanSeek"/> is <c>False</c>.</exception>
        </member>
        <member name="P:NVorbis.IContainerReader.StreamSerials">
            <summary>
            Gets the list of stream serials found in the container so far.
            </summary>
        </member>
        <member name="P:NVorbis.IContainerReader.CanSeek">
            <summary>
            Gets whether the container supports seeking.
            </summary>
        </member>
        <member name="P:NVorbis.IContainerReader.WasteBits">
            <summary>
            Gets the number of bits in the container that are not associated with a logical stream.
            </summary>
        </member>
        <member name="P:NVorbis.IContainerReader.PagesRead">
            <summary>
            Gets the number of pages that have been read in the container.
            </summary>
        </member>
        <member name="E:NVorbis.IContainerReader.NewStream">
            <summary>
            Event raised when a new logical stream is found in the container.
            </summary>
        </member>
        <member name="T:NVorbis.IPacketProvider">
            <summary>
            Provides packets on-demand for the Vorbis stream decoder.
            </summary>
        </member>
        <member name="M:NVorbis.IPacketProvider.GetTotalPageCount">
            <summary>
            Retrieves the total number of pages (or frames) this stream uses.
            </summary>
            <returns>The page count.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:NVorbis.IPacketProvider.CanSeek"/> is <c>False</c>.</exception>
        </member>
        <member name="M:NVorbis.IPacketProvider.GetNextPacket">
            <summary>
            Retrieves the next packet in the stream.
            </summary>
            <returns>The next packet in the stream or <c>null</c> if no more packets.</returns>
        </member>
        <member name="M:NVorbis.IPacketProvider.PeekNextPacket">
            <summary>
            Retrieves the next packet in the stream but does not advance to the following packet.
            </summary>
            <returns>The next packet in the stream or <c>null</c> if no more packets.</returns>
        </member>
        <member name="M:NVorbis.IPacketProvider.GetPacket(System.Int32)">
            <summary>
            Retrieves the packet specified from the stream.
            </summary>
            <param name="packetIndex">The index of the packet to retrieve.</param>
            <returns>The specified packet.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packetIndex"/> is less than 0 or past the end of the stream.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:NVorbis.IPacketProvider.CanSeek"/> is <c>False</c>.</exception>
        </member>
        <member name="M:NVorbis.IPacketProvider.GetGranuleCount">
            <summary>
            Retrieves the total number of granules in this Vorbis stream.
            </summary>
            <returns>The number of samples</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:NVorbis.IPacketProvider.CanSeek"/> is <c>False</c>.</exception>
        </member>
        <member name="M:NVorbis.IPacketProvider.FindPacket(System.Int64,NVorbis.Func{NVorbis.DataPacket,NVorbis.DataPacket,System.Int32})">
            <summary>
            Finds the packet index to the granule position specified in the current stream.
            </summary>
            <param name="granulePos">The granule position to seek to.</param>
            <param name="packetGranuleCountCallback">A callback method that takes the current and previous packets and returns the number of granules in the current packet.</param>
            <returns>The index of the packet that includes the specified granule position or -1 if none found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="granulePos"/> is less than 0 or is after the last granule.</exception>
        </member>
        <member name="M:NVorbis.IPacketProvider.SeekToPacket(System.Int32)">
            <summary>
            Seeks the stream to the indicated packet index.
            </summary>
            <param name="index">The packet index to seek to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than the last available packet index.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:NVorbis.IPacketProvider.CanSeek"/> is <c>False</c>.</exception>
        </member>
        <member name="P:NVorbis.IPacketProvider.StreamSerial">
            <summary>
            Gets the serial number associated with this stream.
            </summary>
        </member>
        <member name="P:NVorbis.IPacketProvider.CanSeek">
            <summary>
            Gets whether seeking is supported on this stream.
            </summary>
        </member>
        <member name="P:NVorbis.IPacketProvider.ContainerBits">
            <summary>
            Gets the number of bits of overhead in this stream's container.
            </summary>
        </member>
        <member name="M:NVorbis.IVorbisStreamStatus.ResetStats">
            <summary>
            Gets the counters for latency and bitrate calculations, as well as overall bit counts
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.EffectiveBitRate">
            <summary>
            Gets the calculated bit rate of audio stream data for the everything decoded so far
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.InstantBitRate">
            <summary>
            Gets the calculated bit rate for the last ~1 second of audio
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.PageLatency">
            <summary>
            Gets the calculated latency per page
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.PacketLatency">
            <summary>
            Gets the calculated latency per packet
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.SecondLatency">
            <summary>
            Gets the calculated latency per second of output
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.OverheadBits">
            <summary>
            Gets the number of bits read that do not contribute to the output audio
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.AudioBits">
            <summary>
            Gets the number of bits read that contribute to the output audio
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.PagesRead">
            <summary>
            Gets the number of pages read so far in the current stream
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.TotalPages">
            <summary>
            Gets the total number of pages in the current stream
            </summary>
        </member>
        <member name="P:NVorbis.IVorbisStreamStatus.Clipped">
            <summary>
            Gets whether the stream has been clipped since the last reset
            </summary>
        </member>
        <member name="T:NVorbis.NewStreamEventArgs">
            <summary>
            Event data for when a new logical stream is found in a container.
            </summary>
        </member>
        <member name="M:NVorbis.NewStreamEventArgs.#ctor(NVorbis.IPacketProvider)">
            <summary>
            Creates a new instance of <see cref="T:NVorbis.NewStreamEventArgs"/> with the specified <see cref="T:NVorbis.IPacketProvider"/>.
            </summary>
            <param name="packetProvider">An <see cref="T:NVorbis.IPacketProvider"/> instance.</param>
        </member>
        <member name="P:NVorbis.NewStreamEventArgs.PacketProvider">
            <summary>
            Gets new the <see cref="T:NVorbis.IPacketProvider"/> instance.
            </summary>
        </member>
        <member name="P:NVorbis.NewStreamEventArgs.IgnoreStream">
            <summary>
            Gets or sets whether to ignore the logical stream associated with the packet provider.
            </summary>
        </member>
        <member name="T:NVorbis.Ogg.ContainerReader">
            <summary>
            Provides an <see cref="T:NVorbis.IContainerReader"/> implementation for basic Ogg files.
            </summary>
        </member>
        <member name="M:NVorbis.Ogg.ContainerReader.#ctor(System.String)">
            <summary>
            Creates a new instance with the specified file.
            </summary>
            <param name="path">The full path to the file.</param>
        </member>
        <member name="M:NVorbis.Ogg.ContainerReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new instance with the specified stream.  Optionally sets to close the stream when disposed.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="closeOnDispose"><c>True</c> to close the stream when <see cref="M:NVorbis.Ogg.ContainerReader.Dispose"/> is called, otherwise <c>False</c>.</param>
        </member>
        <member name="M:NVorbis.Ogg.ContainerReader.Init">
            <summary>
            Initializes the container and finds the first stream.
            </summary>
            <returns><c>True</c> if a valid logical stream is found, otherwise <c>False</c>.</returns>
        </member>
        <member name="M:NVorbis.Ogg.ContainerReader.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:NVorbis.Ogg.ContainerReader.GetStream(System.Int32)">
            <summary>
            Gets the <see cref="T:NVorbis.IPacketProvider"/> instance for the specified stream serial.
            </summary>
            <param name="streamSerial">The stream serial to look for.</param>
            <returns>An <see cref="T:NVorbis.IPacketProvider"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified stream serial was not found.</exception>
        </member>
        <member name="M:NVorbis.Ogg.ContainerReader.GatherNextPage(System.Int32,NVorbis.Ogg.ContainerReader.PageReaderLock)">
            <summary>
            Gathers pages until finding a page for the stream indicated
            </summary>
        </member>
        <member name="M:NVorbis.Ogg.ContainerReader.FindNextStream">
            <summary>
            Finds the next new stream in the container.
            </summary>
            <returns><c>True</c> if a new stream was found, otherwise <c>False</c>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:NVorbis.Ogg.ContainerReader.CanSeek"/> is <c>False</c>.</exception>
        </member>
        <member name="M:NVorbis.Ogg.ContainerReader.GetTotalPageCount">
            <summary>
            Retrieves the total number of pages in the container.
            </summary>
            <returns>The total number of pages.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="P:NVorbis.Ogg.ContainerReader.CanSeek"/> is <c>False</c>.</exception>
        </member>
        <member name="P:NVorbis.Ogg.ContainerReader.StreamSerials">
            <summary>
            Gets the list of stream serials found in the container so far.
            </summary>
        </member>
        <member name="E:NVorbis.Ogg.ContainerReader.NewStream">
            <summary>
            Event raised when a new logical stream is found in the container.
            </summary>
        </member>
        <member name="P:NVorbis.Ogg.ContainerReader.PagesRead">
            <summary>
            Gets the number of pages that have been read in the container.
            </summary>
        </member>
        <member name="P:NVorbis.Ogg.ContainerReader.CanSeek">
            <summary>
            Gets whether the container supports seeking.
            </summary>
        </member>
        <member name="P:NVorbis.Ogg.ContainerReader.WasteBits">
            <summary>
            Gets the number of bits in the container that are not associated with a logical stream.
            </summary>
        </member>
        <member name="T:Cgen.Internal.OpenAL.ALChecker">
            <summary>
            Defines OpenAL error checking functions.
            </summary>
        </member>
        <member name="M:Cgen.Internal.OpenAL.ALChecker.Check(Cgen.Action)">
            <summary>
            Call specific function and check for OpenAL Error.
            </summary>
            <param name="func">Function to call.</param>
        </member>
        <member name="M:Cgen.Internal.OpenAL.ALChecker.CheckError">
            <summary>
            Check for the OpenAL Error.
            </summary>
        </member>
        <member name="P:Cgen.Internal.OpenAL.ALChecker.LastError">
            <summary>
            Gets the last OpenAL Error that occurred.
            Any OpenAL call should use <see cref="M:Cgen.Internal.OpenAL.ALChecker.Check(Cgen.Action)"/> to make this property working properly.
            </summary>
        </member>
        <member name="P:Cgen.Internal.OpenAL.ALChecker.Verbose">
            <summary>
            Gets or Sets whether the Error Checking should be performed and printed under <see cref="T:System.Diagnostics.Trace"/> / <see cref="T:System.Diagnostics.Debug"/> Listeners
            Regardless to Build Configurations.
            </summary>
        </member>
        <member name="P:Cgen.Internal.OpenAL.ALChecker.VerboseLevel">
            <summary>
            Gets or Sets Verbose Level of if <see cref="P:Cgen.Internal.OpenAL.ALChecker.Verbose"/> property return true.
            </summary>
        </member>
        <member name="T:Cgen.Internal.OpenAL.ALChecker.VerboseFlags">
            <summary>
            Defines Verbose level of <see cref="T:Cgen.Internal.OpenAL.ALChecker"/>.
            </summary>
        </member>
        <member name="F:Cgen.Internal.OpenAL.ALChecker.VerboseFlags.All">
            <summary>
            Display all messages.
            </summary>
        </member>
        <member name="F:Cgen.Internal.OpenAL.ALChecker.VerboseFlags.Error">
            <summary>
            Display Warning and Error messages only.
            </summary>
        </member>
        <member name="T:Cgen.Internal.OpenAL.ALContext">
            <summary>
            Defines common OpenAL Context behavior and operations.
            </summary>
        </member>
        <member name="M:Cgen.Internal.OpenAL.ALContext.#ctor">
            <summary>
            Initializes a new <see cref="T:Cgen.Internal.OpenAL.ALContext"/> instance.
            </summary>
        </member>
        <member name="M:Cgen.Internal.OpenAL.ALContext.Process">
            <summary>
            Force the <see cref="T:Cgen.Internal.OpenAL.ALContext"/> to process queued audio events.
            </summary>
        </member>
        <member name="M:Cgen.Internal.OpenAL.ALContext.Suspend">
            <summary>
            Suspend the <see cref="T:Cgen.Internal.OpenAL.ALContext"/> from processing audio events.
            </summary>
        </member>
        <member name="M:Cgen.Internal.OpenAL.ALContext.Activate">
            <summary>
            Activate the <see cref="T:Cgen.Internal.OpenAL.ALContext"/> in the calling thread.
            </summary>
        </member>
        <member name="M:Cgen.Internal.OpenAL.ALContext.Dispose">
            <summary>
            Dispose <see cref="T:Cgen.Internal.OpenAL.ALContext"/> Resource.
            </summary>
        </member>
        <member name="P:Cgen.Internal.OpenAL.ALContext.IsProcessing">
            <summary>
            Gets a value indicating whether the <see cref="T:Cgen.Internal.OpenAL.ALContext"/> is currently processing audio events.
            </summary>
        </member>
        <member name="P:Cgen.Internal.OpenAL.ALContext.IsSynchronized">
            <summary>
            Gets a value whether the <see cref="T:Cgen.Internal.OpenAL.ALContext"/> is synchronized.
            </summary>
        </member>
        <member name="T:Cgen.Internal.OpenAL.ALExtensions">
            <summary>
            Defines a list of OpenAL Extensions that could processed by the hardware.
            </summary>
        </member>
        <member name="M:Cgen.Internal.OpenAL.ALExtensions.IsAvailable(System.String)">
            <summary>
            Check availability of the OpenAL extension in current hardware.
            </summary>
            <param name="ext">Extension name to check.</param>
            <returns>Return true if available, otherwise false.</returns>
        </member>
        <member name="T:Cgen.Utilities.Logger">
            <summary>
            Defines a System Logger for debugging purpose.
            </summary>
        </member>
        <member name="M:Cgen.Utilities.Logger.AddFileListener(System.String)">
            <summary>
            Add a file to listen the log.
            </summary>
            <param name="file">The path of log file.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Log(System.String,Cgen.Utilities.Logger.Level)">
            <summary>
            Writes a message into the System Log.
            </summary>
            <param name="message">Message to be displayed in the System Log.</param>
            <param name="level">Log Message Level.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Information(System.String)">
            <summary>
            Writes a Information message to the System Log.
            </summary>
            <param name="message">Information message.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Information(System.String,System.Object[])">
            <summary>
            Writes a Information message to the System Log.
            </summary>
            <param name="format">Format of the message.</param>
            <param name="args">Format Arguments.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Warning(System.String)">
            <summary>
            Writes a Warning message to the System Log.
            </summary>
            <param name="message">Warning message.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Warning(System.String,System.Object[])">
            <summary>
            Writes a Warning message to the System Log.
            </summary>
            <param name="format">Format of the message.</param>
            <param name="args">Format Arguments.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Error(System.String)">
            <summary>
            Writes a Error message to the System Log.
            </summary>
            <param name="message">Warning message.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes a Error message to the System Log.
            </summary>
            <param name="format">Format of the message.</param>
            <param name="args">Format Arguments.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Error(System.Exception)">
            <summary>
            Writes a Error message to the System Log.
            </summary>
            <param name="ex">Exception event.</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Fail(System.String)">
            <summary>
            Emits a specified error message.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Cgen.Utilities.Logger.Fail(System.String,System.String)">
            <summary>
            Emits a specified error message.
            </summary>
            <param name="message">Error message</param>
            <param name="detailMessage">Detail message of error.</param>
        </member>
        <member name="P:Cgen.Utilities.Logger.UseStackTrace">
            <summary>
            Gets or Sets the value indicating whether the System Log should print Stack Trace each time listener receive a message.
            </summary>
        </member>
        <member name="P:Cgen.Utilities.Logger.StackFrame">
            <summary>
            Gets or Sets the Stack Frame layer that being used when the System Log print the Stack Trace.
            <see cref="P:Cgen.Utilities.Logger.UseStackTrace"/> must set to true to make this feature working.
            </summary>
        </member>
        <member name="T:Cgen.Utilities.Logger.Level">
            <summary>
            Log Level.
            </summary>
        </member>
        <member name="F:Cgen.Utilities.Logger.Level.Information">
            <summary>
            Information Message.
            </summary>
        </member>
        <member name="F:Cgen.Utilities.Logger.Level.Warning">
            <summary>
            Warning Message.
            </summary>
        </member>
        <member name="F:Cgen.Utilities.Logger.Level.Error">
            <summary>
            Error Message.
            </summary>
        </member>
    </members>
</doc>
